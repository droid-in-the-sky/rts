native do
    enum {
        VIS_NULL    = 0,    // reserved
        VIS_UNIT    = 1,
        VIS_FOG     = 2,
        VIS_RANGE   = 3,
        VIS_FIRE    = 4,
        VIS_MAX             // reserved
    };

    // 00000000     0: no collision
    // 00000001     1: id
    // 00000010     2: enemy team
    // 00000100     4: same  team
    // 00000111     7: all
    enum {
        COL_ID     = 1,
        COL_ENEMY  = 2,
        COL_FRIEND = 4,
    };

    char idVSid[VIS_MAX][VIS_MAX] = {
        { 0, 0, 0, 0, 0 },    // [00] NULL
        { 0, 7, 0, 0, 2 },    // [01] UNIT
        { 0, 0, 0, 0, 0 },    // [02] MELEE FOG
        { 0, 2, 0, 0, 0 },    // [03] RANGE
        { 0, 2, 0, 0, 0 },    // [04] FIRE
    //   00 01 02 03 04 05 06 07 08 09 10 11 12
    };
end

// Moves a given "vis" object:
//      - moves until it collides or reaches the destination
//      - emits "ok" in either case

class MoveIVisible with
    var   IVisible& vis;    // object to move
    var   _SDL_Point to;    // destination
    event void       ok;    // reached "to"
do
    // use float on calculations (write back to "pos" on each "DT" cycle)
    var float sx = vis.pos.x;
    var float sy = vis.pos.y;
    var float vx;
    var float vy;

    // fallback position on collisions
    var int old_x = vis.pos.x;
    var int old_y = vis.pos.y;

    par/or do
        loop do
            var IVisible* oth = await vis.go_collide
                                until oth:id == _VIS_UNIT;
            vis.pos.x = old_x;
            vis.pos.y = old_y;
            sx = old_x;
            sy = old_y;
        end
    with
        var int dt;
        every dt in SDL_DT do
            // calculate speed ratio "vx" vs "vy"
            var float dx = _abs(vis.pos.x - to.x);
            var float dy = _abs(vis.pos.y - to.y);
            if dx == 0 then
                vx = 0;
                vy = vis.speed;
            else/if dy == 0 then
                vx = vis.speed;
                vy = 0;
            else
                vx = vis.speed / _sqrt(1 + _pow(dy/dx,2));
                vy = vx * (dy/dx);
            end

            old_x = vis.pos.x;    // save as old position
            old_y = vis.pos.y;    // to avoid collision

            var float vx_ = vx;
            if sx > to.x then
                vx_ = -vx_;
            end
            sx = sx + vx_*dt/1000;

            var float vy_ = vy;
            if sy > to.y then
                vy_ = -vy_;
            end
            sy = sy + vy_*dt/1000;

            vis.pos.x = sx;
            vis.pos.y = sy;

            if  (vx_>=0 and vis.pos.x>=to.x or
                 vx_<=0 and vis.pos.x<=to.x)
            and (vy_>=0 and vis.pos.y>=to.y or
                 vy_<=0 and vis.pos.y<=to.y)
            then
                vis.pos.x = (int)to.x; // round to destination
                vis.pos.y = (int)to.y; //   ""
                break;                  // reached destination
            end
        end
    end
    emit this.ok;
end
