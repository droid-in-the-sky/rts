#include "c.ceu"            // standard C functions (e.g. assert)
#include "sdl.ceu"          // basic functions (e.g. SDL_CreateWindow)
#include "sdl-gfx.ceu"      // drawing primitives (e.g.  bezierRGBA)
#include "sdl-colors.ceu"   // most commonly used colors (e.g. colors.white)

input void SDL_QUIT;
input int  SDL_DT;
input void SDL_REDRAW;
input _SDL_KeyEvent* SDL_KEYDOWN;

input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;
input _SDL_MouseMotionEvent* SDL_MOUSEMOTION;

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("War", 500, 400, 1280, 800,
                                _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

interface Global with
    var int money;      // player money
    pool IVisible[] all;
end
var int money = 1000;

#include "ren.ceu"
#include "snd.ceu"
#include "visible.ceu"
#include "unit.ceu"
#include "nest.ceu"
#include "group.ceu"

var  Ren_ini    _;
var  Group      group;
var  Nest       nest;
pool IVisible[]  all;
var  Ren_end    _;

// create two initial units
spawn Unit in global:all with
    this.id     = _VIS_UNIT;
    this.team   =   1;
    this.speed  = 100;
    this.tex    = _TEX_STORMTROOPER;
    this.life   =  10;
    this.damage =   2;
    this.range  = 100;
    this.pos.x =   30;
    this.pos.y =   30;
    this.rad   =   20;
end;
spawn Unit in global:all with
    this.id     = _VIS_UNIT;
    this.team   =   2;
    this.speed  =  30;
    this.tex    = _TEX_YODA;
    this.life   =  50;
    this.damage =  10;
    this.range  =   0;
    this.pos.x  = 200;
    this.pos.y  = 200;
    this.rad    =  20;
end;

par/or do
    // COLLISION DETECTION //
    // check collisions among all units every frame
    every SDL_DT do
        var IVisible*[100] objs;      // TODO: 100
        var int          objs_n = 0;
        loop (IVisible*)vis in global:all do
            objs[objs_n] := vis;
            objs_n = objs_n + 1;
            var IUnit* u = (IUnit*) vis;
            if u!=null and u:vis_range!=null then
                objs[objs_n] := u:vis_range;
                objs_n = objs_n + 1;
            end
        end

        // TODO NxN (could be NxN/2)
        loop i in objs_n do
            var IVisible* vis1 = objs[i];
            var int id1   = vis1:id;
            var int team1 = vis1:team;
            loop j in objs_n do
                var IVisible* vis2 = objs[j];
                var int id2   = vis2:id;
                var int team2 = vis2:team;
                if vis1==vis2 or (not _idVSid[id1][id2]) then
                    continue;
                end
                if (id1==_VIS_FIRE or id2==_VIS_FIRE) and team1==team2 then
                    continue;   // fire vs * of the same team does not collide
                end
                if (id1==_VIS_RANGE or id2==_VIS_RANGE) and team1==team2 then
                    continue;   // range vs * of the same team does not collide
                end
                if _SDL_Circle_vs_Circle(&vis1:pos,vis1:rad,&vis2:pos,vis2:rad) then
                    // TODO: single vis collision (aXb not aXc)
                    emit vis1:go_collide => vis2;
                    emit vis2:go_collide => vis1;
                end
            end
        end
    end
with
    // MOUSE BUTTON INPUT //
    var _SDL_MouseButtonEvent* but;
    every but in SDL_MOUSEBUTTONDOWN do

        // right click: activate nest or move selected units
        if but:button == _SDL_BUTTON_RIGHT then
            // activate nest
            if _SDL_Circle_vs_Mouse(&nest.pos, nest.rad, but) then
                emit nest.go_build;

            // move selected units
            else
                loop (Unit*)u in global:all do
                    if u:selected? then
                        var _SDL_Point pt;
                            pt.x = (int) but:x;
                            pt.y = (int) but:y;
                        emit u:go_point => &pt;
                    end
                end
            end

        // left click: select unit or start group region
        else/if but:button == _SDL_BUTTON_LEFT then

            // select unit
            var bool go_group? = true;
            loop (Unit*)u in global:all do
                if u:team != 1 then
                    continue;               // skip enemies
                end
                if _SDL_Circle_vs_Mouse(&u:pos, u:rad, but) then
                    go_group? = false;      // found, no group region
                    u:selected? = not u:selected?;
                else
                    u:selected? = false;    // deselect all
                end
            end

            // start group region
            if go_group? then
                emit group.go => but;
            end
        end
    end
#define DEBUG
#ifdef DEBUG
with
    var int fps = 0;                // previous FPS
    loop do
        var int c = 0;              // reset the current counter

        // create a texture with the previous FPS
/*
        var char[5] str;
        _sprintf(str, "%d", fps);
        var _SDL_Texture* tex;
        finalize
            tex = _SDL_text2texture(_REN, _FONT_SMALL, str,
                                    &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        var _SDL_Rect r;
            r.x = 200;
            r.y = 200;
            r.w = 30;
            r.h = 30;
*/

        par/or do
            await 1s;
        with
            every SDL_REDRAW do
                c = c + 1;
                //_SDL_RenderCopy(_REN, tex, null, &r);
            end
        end
        fps = c;
        _printf("[FPS=%d]\n", fps);
    end
#endif
with
    await SDL_QUIT;
end

escape 0;
