#include "c.ceu"            // standard C functions (e.g. assert)
#include "sdl.ceu"          // basic functions (e.g. SDL_CreateWindow)
#include "sdl-gfx.ceu"      // drawing primitives (e.g.  bezierRGBA)
#include "sdl-colors.ceu"   // most commonly used colors (e.g. colors.white)

input void SDL_QUIT;
input int  SDL_DT;
input void SDL_REDRAW;
input _SDL_KeyEvent* SDL_KEYDOWN;

input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;
input _SDL_MouseMotionEvent* SDL_MOUSEMOTION;

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("War", 500, 400, 1280, 800,
                                _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

interface Global with
    var int money;      // player money
end
var int money = 1000;

#include "ren.ceu"
#include "snd.ceu"
#include "visible.ceu"
#include "nest.ceu"
#include "unit.ceu"
#include "group.ceu"

par/or do
    _SDL_SetRenderDrawColor(_REN, 100,100,100,255);
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W, _REN_H,
                       0x00,0xAA,0x00,0xFF);
    end
with
    var  Group  group;
    var  Nest   nest;
    pool Unit[] units;
    do
        par do
            // create two initial units
            spawn Unit in units with
                this.id     = _VIS_TEAM1;
                this.tex    = _TEX_STORMTROOPER;
                this.life   =  10;
                this.speed  = 100;
                this.rect.x =  10;
                this.rect.y =  10;
                this.rect.w =  32;
                this.rect.h =  48;
            end;
            spawn Unit in units with
                this.id     = _VIS_TEAM2;
                this.tex    = _TEX_YODA;
                this.life   =  50;
                this.speed  =  30;
                this.rect.x = 150;
                this.rect.y = 150;
                this.rect.w =  32;
                this.rect.h =  48;
            end;
            await FOREVER;
        with
            // check collisions among all units every frame
            every SDL_DT do
                loop (Unit*)u1 in units do   // TODO double collision
                    loop (Unit*)u2 in units do
                        if  u1 != u2
                        and _SDL_HasIntersection(&u1:rect,&u2:rect) then
                            emit u1:go_collide => u2;
                            emit u2:go_collide => u1;
                        end
                    end
                end
            end
        with
            // mouse button handling
            var _SDL_MouseButtonEvent* but;
            every but in SDL_MOUSEBUTTONDOWN do

                // right click: activate nest or move selected units
                if but:button == _SDL_BUTTON_RIGHT then
                    // activate nest
                    if _SDL_Rect_vs_Mouse(&nest.rect,but) then
                        emit nest.go_build;

                    // move selected units
                    else
                        loop (Unit*)u in units do
                            if u:selected? then
                                var _SDL_Point pt;
                                    pt.x = (int) but:x - u:rect.w/2;
                                    pt.y = (int) but:y - u:rect.h/2;
                                emit u:go_point => &pt;
                            end
                        end
                    end

                // left click: select unit or start group region
                else/if but:button == _SDL_BUTTON_LEFT then

                    // select unit
                    var bool go_group? = true;
                    loop (Unit*)u in units do
                        if u:id != _VIS_TEAM1 then
                            continue;               // skip enemies
                        end
                        if _SDL_Rect_vs_Mouse(&u:rect, but) then
                            go_group? = false;      // found, no group region
                            u:selected? = not u:selected?;
                        else
                            u:selected? = false;    // deselect all
                        end
                    end

                    // start group region
                    if go_group? then
                        emit group.go => but;
                    end
                end
            end
        with
            // select all units under group region callback
// TODO: move to nest with "spawn Unit in global:units"
            var _SDL_Rect* r;
            every r in group.ok do
                loop (Unit*)u in units do
                    if u:id == _VIS_TEAM1 then
                        u:selected? = _SDL_HasIntersection(&u:rect,r);
                    end
                end
            end
        with
// TODO: move to nest with "spawn Unit in global:units"
            // spawn unit on nest callback
            every nest.ok_built do
                spawn Unit in units with
                    this.id     = _VIS_TEAM1;
                    this.tex    = _TEX_STORMTROOPER;
                    this.life   =  10;
                    this.speed  = 100;
                    this.rect.x =  10;
                    this.rect.y =  10;
                    this.rect.w =  32;
                    this.rect.h =  48;
                end;
            end
        end
    end
#define DEBUG
#ifdef DEBUG
with
    var int fps = 0;                // previous FPS
    loop do
        var int c = 0;              // reset the current counter

        // create a texture with the previous FPS
/*
        var char[5] str;
        _sprintf(str, "%d", fps);
        var _SDL_Texture* tex;
        finalize
            tex = _SDL_text2texture(_REN, _FONT_SMALL, str,
                                    &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        var _SDL_Rect r;
            r.x = 200;
            r.y = 200;
            r.w = 30;
            r.h = 30;
*/

        par/or do
            await 1s;
        with
            every SDL_REDRAW do
                c = c + 1;
                //_SDL_RenderCopy(_REN, tex, null, &r);
            end
        end
        fps = c;
        _printf("[FPS=%d]\n", fps);
    end
#endif
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
with
    await SDL_QUIT;
end

escape 0;
