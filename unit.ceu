interface IUnit with
    interface IVisible;
    var   int           range;      // sight range in px
    var   int           life;       // dies when <= 0
    var   int           damage;     // damage it inflicts to others
    var   bool          selected?;  // to receive commands from player
    event int           go_hit;     // hitted with "int" damage
    event _SDL_Point*   go_point;   // move to "_SDL_Point" (null stop)
    event IVisible*     go_follow;  // follow "IVisible"
    var   IVisible*     vis_range;
end

class Fog with
    interface IVisible;
        var int id    = _VIS_FOG;
        var int speed = 0;
do
    watching 100ms do
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, pos.x,pos.y,2, 0xCC,0x00,0x00,0xFF);
        end
    end
end

class Fire with
    interface IVisible;
        var int id    = _VIS_FIRE;
        var int team  = 0;
        var int speed = 0;
        var int rad   = 2;

    var _SDL_Point to;
    var int        damage;
do
    _assert(this.team   != 0);
    _assert(this.speed  != 0);
    _assert(this.damage != 0);

    // move "this" to "to"
    var MoveIVisible move with
        _.vis = this;
        _.to  = to;
    end;

    par/or do
        await move.ok;
    with
        var IVisible* vis = await this.go_collide;
                            // different team is guaranteed by idVSid
        var IUnit* oth = (IUnit*) vis;
        _assert(oth != null);
        emit oth:go_hit => this.damage;
    with
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, pos.x,pos.y,rad, 0xFF,0x00,0x00,0xFF);
        end
    end
end

class Range with
    interface IVisible;
        var int id    = _VIS_RANGE;
        var int team  = 0;
    var IUnit& unit;
do
    this.team = this.unit.team;
    this.rad  = this.unit.range;

    par do
        loop do
            this.pos = this.unit.pos;
            await SDL_DT;
        end
    with
        loop do
            var IVisible* vis = await this.go_collide;
                                // different team is guaranteed by idVSid
            var IUnit* oth = (IUnit*)vis;
            if oth != null then
                watching oth do
                    await 1s;   // TODO: depend on speed
                    spawn Fire in global:p:all with
                        _.id    = _VIS_FIRE;
                        _.team  = team;
                        _.speed = unit.speed * 3;
                        _.pos   = pos;
                        _.to    = oth:pos;
                        _.damage = unit.damage;
                    end;
                end
            end
        end
    with
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, pos.x,pos.y,rad, 0x00,0x00,0x00,0x10);
        end
    end
end

class Unit with
    interface IUnit;
        // IVisible
        var int id    = _VIS_UNIT;
        var int team  = 0;
        var int speed = 0;
        // IUnit
        var int       range       = 0;
        var int       damage      = 0;
        var bool      selected?   = 0;
        var IVisible* vis_range   = null;

    var int tex = _TEX_MAX;
do
    _assert(this.team   != 0);
    _assert(this.speed  != 0);
    _assert(this.tex    < _TEX_MAX);
    _assert(this.life   != 0);
    _assert(this.damage != 0);

    var Range vis_range_ with
        _.unit = this;
    end;
    this.vis_range = &vis_range_;

    // standing frame
    var _SDL_Rect clip;
        clip.x = 0;
        clip.y = 0;
        clip.w = 32;
        clip.h = 48;

    par/or do
        // HIT (go_hit):
        // - take damage
        // - TODO: ignores all but the first
        var int v;
        every v in this.go_hit do
            this.life = life - v;
            if life <= 0 then
                break;
            end
        end
        await 100ms;    // last breath
    with
        // VISIBLE COLLISION (go_collide):
        // - perform melee attack after a reaction/performing time
        // - TODO: ignores all but the first colliding org
        loop do
            var IVisible* vis := await this.go_collide
                                 until vis:team != this.team;
                                // := work around "vis" inside await-until
            var IUnit* oth = (IUnit*)vis;
            if oth != null then
                watching oth do
                    await 500ms;   // TODO: depend on speed
                    _Mix_PlayChannel(-1, _SND_SWORD, 0);
                    spawn Fog in global:p:all with
                        _.pos = oth:pos;
                    end;
                    emit oth:go_hit => this.damage;
                end
            end
        end
    with
        // either MOVE (go_point) or FOLLOW (go_follow) //
        var int go? = false;
        var IVisible* vis = null;
        var _SDL_Point to;
        loop do

            par/or do
                var _SDL_Point* pt = await go_point;
                if pt != null then
                    go? = true;
                    to = *pt;
                end
            with
                var IVisible* vis_ = await go_follow;
                vis := vis_;
                    // TODO: tight path to "watching vis"
                if vis != null then
                    go? = true;
                    to = vis:pos;
                end
            with
                if not go? then
                    await FOREVER;
                end
                go? = false;

                finalize with
                    clip.x = 0;     // always terminate on standing position
                end

                // move "this" to "*to"
                var MoveIVisible move with
                    _.vis = this;
                    _.to  = to;
                end;

                par/or do
                    // animate sprite frames while moving
                    watching move.ok do
                        loop do
                            loop i in 4 do
                                clip.x = clip.w*i;
                                await (10000/this.speed)ms;
                            end
                        end
                    end
                with
                    // follow
                    if vis == null then
                        await FOREVER;
                    else
                        watching vis do
                            every 500ms do
                                move.to = vis:pos;
                            end
                        end
                        await 100ms;    // eliminates tight loop WRN
                    end
                end
            end
        end
    with
        every SDL_REDRAW do
            if this.selected? then
                _filledCircleRGBA(_REN, pos.x,pos.y,rad, 0x88,0x88,0x88,0x88);
            end
            var _SDL_Rect r;
                r.x = pos.x - 32/2;     // TODO
                r.y = pos.y - 48/2;     // TODO
                r.w = 32;               // TODO
                r.h = 48;               // TODO
            _SDL_RenderCopy(_REN, _TEXS[this.tex], &clip, &r);
        end
    end
end
